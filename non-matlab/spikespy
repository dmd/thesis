#!/usr/bin/env python
# global signal spikes finder
# 2007 Daniel Drucker <ddrucker@psych.upenn.edu>

import sys
import os
import re
import math
from optparse import OptionParser

def stats(values):
    sum = sumsq = n = 0
    for v in values:
        sum += v
        sumsq += v**2
        n+=1
    sd = math.sqrt((sumsq - sum**2 / n) / n)
    mean = sum/n
    return(n,mean,sd)

def RefRead(filePath):
    """Read a VoxBo style .ref file and return it as a list of values"""
    values = []
    for line in open(filePath, 'rU').readlines():
        # skip comment lines
        if re.match(';',line): continue
        try:
            values += [float(line)]
        except:
            pass
    return values
        
def main():
    usage = "usage: %prog [options]\nRun in the directory that contains all the _01, _02 etc directories."
    parser = OptionParser(usage=usage)
    parser.add_option("-d", "--deviations",
                      dest="deviations",
                      default=3.5,
                      help="use DEVIATIONS many deviations",
                      action="store",
                      type="float",
                      metavar="DEVIATIONS")
    parser.add_option("-s","--smooth",
                      default=False,
                      help="look at files starting with s (e.g., smoothed files)",
                      action="store_const",
                      dest="smoothed",
                      default="",
                      const="s")
    (options, args) = parser.parse_args()

    values = []
    
    # walk the tree and get the files
    file_listing = os.listdir(".")
    file_listing.sort()
    for d in file_listing:
        # is this a data directory?
        if re.match(r'^\w\d{6}\w_\d\d$', d):
            for f in os.listdir(d):
                # is this a global signal file?
                if re.match('^' + options.smoothed + d + '_GS.ref$', f):
                    values += RefRead(os.path.join(d,f))

    if len(values)==0:
        raise Exception, "Couldn't find standard Aguirre lab style data directories. Try -h for help."
    
    (n, mean, sd) = stats(values)
    dev = sd * options.deviations

    spikes = []
    for i in range(n):
        if abs(values[i] - mean) > dev:
            spikes += [str(i)]

    if spikes:
        print 'newcov spike "' + ",".join(spikes) + '"'
        print "end"
    else:
        sys.stderr.write('No spikes found.')

    
if __name__ == "__main__":
    main()
